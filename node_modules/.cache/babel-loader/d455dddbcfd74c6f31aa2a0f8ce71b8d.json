{"ast":null,"code":"var _jsxFileName = \"/home/harshit/Downloads/to-view-list-master/client/src/App.js\";\nimport React, { useEffect } from 'react';\nimport ToastNotify from './components/ToastNotify';\nimport NavBar from './components/NavBar';\nimport Routes from './components/Routes';\nimport entryService from './services/entries';\nimport storageService from './utils/localStorageHelpers';\nimport { useAuthContext } from './context/auth/authState';\nimport { loginUser } from './context/auth/authReducer';\nimport { useEntryContext } from './context/entry/entryState';\nimport { initializeEntries, toggleDarkMode, clearNotification, toggleIsLoading } from './context/entry/entryReducer';\nimport notify from './utils/notifyDispatcher';\nimport { Paper } from '@material-ui/core/';\nimport { useMainPaperStyles } from './styles/muiStyles';\nimport customTheme from './styles/customTheme';\nimport { ThemeProvider } from '@material-ui/core/styles';\nconst App = () => {\n  const [{\n    user\n  }, authDispatch] = useAuthContext();\n  const [{\n    darkMode,\n    notification\n  }, entryDispatch] = useEntryContext();\n  const classes = useMainPaperStyles();\n  useEffect(() => {\n    const loggedUser = storageService.loadUser();\n    if (loggedUser) {\n      authDispatch(loginUser(loggedUser));\n      entryService.setToken(loggedUser.token);\n    }\n  }, [authDispatch]);\n  useEffect(() => {\n    const getAllEntries = async () => {\n      try {\n        entryDispatch(toggleIsLoading());\n        const entries = await entryService.getAll();\n        entryDispatch(initializeEntries(entries));\n        entryDispatch(toggleIsLoading());\n      } catch (err) {\n        var _err$response, _err$response$data;\n        entryDispatch(toggleIsLoading());\n        if (err === null || err === void 0 ? void 0 : (_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) {\n          notify(entryDispatch, `${err.response.data.error}`, 'error');\n        } else {\n          notify(entryDispatch, `${err.message}`, 'error');\n        }\n      }\n    };\n    if (user) {\n      getAllEntries();\n    }\n  }, [entryDispatch, user]);\n  useEffect(() => {\n    const isDarkMode = storageService.loadDarkMode();\n    if (isDarkMode === 'true') {\n      entryDispatch(toggleDarkMode());\n    }\n  }, [entryDispatch]);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: customTheme(darkMode),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    elevation: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), notification && /*#__PURE__*/React.createElement(ToastNotify, {\n    open: Boolean(notification),\n    handleClose: () => entryDispatch(clearNotification()),\n    severity: notification.severity,\n    message: notification.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  })));\n};\nexport default App;","map":{"version":3,"names":["React","useEffect","ToastNotify","NavBar","Routes","entryService","storageService","useAuthContext","loginUser","useEntryContext","initializeEntries","toggleDarkMode","clearNotification","toggleIsLoading","notify","Paper","useMainPaperStyles","customTheme","ThemeProvider","App","user","authDispatch","darkMode","notification","entryDispatch","classes","loggedUser","loadUser","setToken","token","getAllEntries","entries","getAll","err","_err$response","_err$response$data","response","data","error","message","isDarkMode","loadDarkMode","createElement","theme","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","root","elevation","open","Boolean","handleClose","severity"],"sources":["/home/harshit/Downloads/to-view-list-master/client/src/App.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport ToastNotify from './components/ToastNotify';\nimport NavBar from './components/NavBar';\nimport Routes from './components/Routes';\nimport entryService from './services/entries';\nimport storageService from './utils/localStorageHelpers';\nimport { useAuthContext } from './context/auth/authState';\nimport { loginUser } from './context/auth/authReducer';\nimport { useEntryContext } from './context/entry/entryState';\nimport {\n  initializeEntries,\n  toggleDarkMode,\n  clearNotification,\n  toggleIsLoading,\n} from './context/entry/entryReducer';\nimport notify from './utils/notifyDispatcher';\n\nimport { Paper } from '@material-ui/core/';\nimport { useMainPaperStyles } from './styles/muiStyles';\nimport customTheme from './styles/customTheme';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nconst App = () => {\n  const [{ user }, authDispatch] = useAuthContext();\n  const [{ darkMode, notification }, entryDispatch] = useEntryContext();\n\n  const classes = useMainPaperStyles();\n\n  useEffect(() => {\n    const loggedUser = storageService.loadUser();\n\n    if (loggedUser) {\n      authDispatch(loginUser(loggedUser));\n      entryService.setToken(loggedUser.token);\n    }\n  }, [authDispatch]);\n\n  useEffect(() => {\n    const getAllEntries = async () => {\n      try {\n        entryDispatch(toggleIsLoading());\n        const entries = await entryService.getAll();\n        entryDispatch(initializeEntries(entries));\n        entryDispatch(toggleIsLoading());\n      } catch (err) {\n        entryDispatch(toggleIsLoading());\n\n        if (err?.response?.data?.error) {\n          notify(entryDispatch, `${err.response.data.error}`, 'error');\n        } else {\n          notify(entryDispatch, `${err.message}`, 'error');\n        }\n      }\n    };\n    if (user) {\n      getAllEntries();\n    }\n  }, [entryDispatch, user]);\n\n  useEffect(() => {\n    const isDarkMode = storageService.loadDarkMode();\n    if (isDarkMode === 'true') {\n      entryDispatch(toggleDarkMode());\n    }\n  }, [entryDispatch]);\n\n  return (\n    <ThemeProvider theme={customTheme(darkMode)}>\n      <Paper className={classes.root} elevation={0}>\n        <NavBar />\n        <Routes />\n        {notification && (\n          <ToastNotify\n            open={Boolean(notification)}\n            handleClose={() => entryDispatch(clearNotification())}\n            severity={notification.severity}\n            message={notification.message}\n          />\n        )}\n      </Paper>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}